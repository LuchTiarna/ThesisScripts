plot_chunk5 <- ggplot(data=(data %>% filter(sigmoid_gen=="cauchy") %>% filter(noise_sd < 0.04)), aes(x=sigmoid_fit, y=iqr_diff, col=as.factor(iqr_diff), group=as.factor(iqr_diff))) +
stat_summary(fun.data = "mean_cl_boot") +
stat_summary(fun.y = "mean", geom = "line") +
facet_grid(sigmoid_gen ~ .)  +
scale_x_discrete(limits=c("cauchy", "logistic", "weibull", "gauss", "gumbel")) +
theme(legend.position="none") +
ylab(label="") +
xlab(label="Psychometric function")
grid.arrange(plot_chunk1, plot_chunk2, plot_chunk3, plot_chunk4, plot_chunk5, nrow=5)
plot_chunk1 <- ggplot(data=(data %>% filter(sigmoid_gen=="gumbel") %>% filter(noise_sd < 0.04)), aes(x=sigmoid_fit, y=iqr_diff, col=as.factor(id_predDistr), group=as.factor(id_predDistr))) +
stat_summary(fun.data = "mean_cl_boot") +
stat_summary(fun.y = "mean", geom = "line") +
facet_grid(sigmoid_gen ~ .)  +
scale_x_discrete(limits=c("gumbel","cauchy", "logistic", "weibull", "gauss")) +
theme(legend.position="none") +
ylab(label="") +
xlab(label="")
plot_chunk2 <- ggplot(data=(data %>% filter(sigmoid_gen=="gauss") %>% filter(noise_sd < 0.04)), aes(x=sigmoid_fit, y=iqr_diff, col=as.factor(id_predDistr), group=as.factor(id_predDistr))) +
stat_summary(fun.data = "mean_cl_boot") +
stat_summary(fun.y = "mean", geom = "line") +
facet_grid(sigmoid_gen ~ .)  +
scale_x_discrete(limits=c( "gauss","gumbel","cauchy", "logistic", "weibull"))+
theme(legend.position="none") +
xlab(label=  "") +
ylab(label = "")
plot_chunk3 <- ggplot(data=(data %>% filter(sigmoid_gen=="weibull") %>% filter(noise_sd < 0.04)), aes(x=sigmoid_fit, y=iqr_diff, col=as.factor(id_predDistr), group=as.factor(id_predDistr))) +
stat_summary(fun.data = "mean_cl_boot") +
stat_summary(fun.y = "mean", geom = "line") +
facet_grid(sigmoid_gen ~ .)  +
scale_x_discrete(limits=c( "weibull", "gauss", "gumbel","cauchy", "logistic")) +
theme(legend.position="none") +
xlab(label="") +
ylab(label = "IQR error")
plot_chunk4 <- ggplot(data=(data %>% filter(sigmoid_gen=="logistic") %>% filter(noise_sd < 0.04)), aes(x=sigmoid_fit, y=iqr_diff, col=as.factor(id_predDistr), group=as.factor(id_predDistr))) +
stat_summary(fun.data = "mean_cl_boot") +
stat_summary(fun.y = "mean", geom = "line") +
facet_grid(sigmoid_gen ~ .)  +
scale_x_discrete(limits=c( "logistic", "weibull", "gauss","gumbel","cauchy")) +
theme(legend.position="none") +
ylab(label="")+
xlab(label="")
plot_chunk5 <- ggplot(data=(data %>% filter(sigmoid_gen=="cauchy") %>% filter(noise_sd < 0.04)), aes(x=sigmoid_fit, y=iqr_diff, col=as.factor(id_predDistr), group=as.factor(id_predDistr))) +
stat_summary(fun.data = "mean_cl_boot") +
stat_summary(fun.y = "mean", geom = "line") +
facet_grid(sigmoid_gen ~ .)  +
scale_x_discrete(limits=c("cauchy", "logistic", "weibull", "gauss", "gumbel")) +
theme(legend.position="none") +
ylab(label="") +
xlab(label="Psychometric function")
grid.arrange(plot_chunk1, plot_chunk2, plot_chunk3, plot_chunk4, plot_chunk5, nrow=5)
plot_chunk1 <- ggplot(data=(data %>% filter(sigmoid_gen=="gumbel")), aes(x=sigmoid_fit, y=perf_th_err, col=as.factor(noise_sd), group=as.factor(noise_sd))) +
stat_summary(fun.data = "mean_cl_boot") +
stat_summary(fun.y = "mean", geom = "line") +
facet_grid(sigmoid_gen ~ .)  +
scale_x_discrete(limits=c("gumbel","cauchy", "logistic", "weibull", "gauss")) +
theme(legend.position="none") +
ylab(label="") +
xlab(label="")
plot_chunk2 <- ggplot(data=(data %>% filter(sigmoid_gen=="gauss")), aes(x=sigmoid_fit, y=perf_th_err, col=as.factor(noise_sd), group=as.factor(noise_sd))) +
stat_summary(fun.data = "mean_cl_boot") +
stat_summary(fun.y = "mean", geom = "line") +
facet_grid(sigmoid_gen ~ .)  +
scale_x_discrete(limits=c( "gauss","gumbel","cauchy", "logistic", "weibull"))+
theme(legend.position="none") +
xlab(label=  "") +
ylab(label = "")
plot_chunk3 <- ggplot(data=(data %>% filter(sigmoid_gen=="weibull")), aes(x=sigmoid_fit, y=perf_th_err, col=as.factor(noise_sd), group=as.factor(noise_sd))) +
stat_summary(fun.data = "mean_cl_boot") +
stat_summary(fun.y = "mean", geom = "line") +
facet_grid(sigmoid_gen ~ .)  +
scale_x_discrete(limits=c( "weibull", "gauss", "gumbel","cauchy", "logistic")) +
theme(legend.position="none") +
xlab(label="") +
ylab(label = "Performance threshold error")
plot_chunk4 <- ggplot(data=(data %>% filter(sigmoid_gen=="logistic")), aes(x=sigmoid_fit, y=perf_th_err, col=as.factor(noise_sd), group=as.factor(noise_sd))) +
stat_summary(fun.data = "mean_cl_boot") +
stat_summary(fun.y = "mean", geom = "line") +
facet_grid(sigmoid_gen ~ .)  +
scale_x_discrete(limits=c( "logistic", "weibull", "gauss","gumbel","cauchy")) +
theme(legend.position="none") +
ylab(label="")+
xlab(label="")
plot_chunk5 <- ggplot(data=(data %>% filter(sigmoid_gen=="cauchy")), aes(x=sigmoid_fit, y=perf_th_err, col=as.factor(noise_sd), group=as.factor(noise_sd))) +
stat_summary(fun.data = "mean_cl_boot") +
stat_summary(fun.y = "mean", geom = "line") +
facet_grid(sigmoid_gen ~ .)  +
scale_x_discrete(limits=c("cauchy", "logistic", "weibull", "gauss", "gumbel")) +
theme(legend.position="none") +
ylab(label="") +
xlab(label="Psychometric function")
grid.arrange(plot_chunk1, plot_chunk2, plot_chunk3, plot_chunk4, plot_chunk5, nrow=5)
#perf_th sampling scheme
plot_chunk1 <- ggplot(data=(data %>% filter(sigmoid_gen=="gumbel")), aes(x=sigmoid_fit, y=perf_th_err, col=as.factor(id_predDistr), group=as.factor(id_predDistr))) +
stat_summary(fun.data = "mean_cl_boot") +
stat_summary(fun.y = "mean", geom = "line") +
facet_grid(sigmoid_gen ~ .)  +
scale_x_discrete(limits=c("gumbel","cauchy", "logistic", "weibull", "gauss")) +
theme(legend.position="none") +
ylab(label="") +
xlab(label="")
plot_chunk2 <- ggplot(data=(data %>% filter(sigmoid_gen=="gauss")), aes(x=sigmoid_fit, y=perf_th_err, col=as.factor(id_predDistr), group=as.factor(id_predDistr))) +
stat_summary(fun.data = "mean_cl_boot") +
stat_summary(fun.y = "mean", geom = "line") +
facet_grid(sigmoid_gen ~ .)  +
scale_x_discrete(limits=c( "gauss","gumbel","cauchy", "logistic", "weibull"))+
theme(legend.position="none") +
xlab(label=  "") +
ylab(label = "Performance threshold error")
plot_chunk3 <- ggplot(data=(data %>% filter(sigmoid_gen=="weibull")), aes(x=sigmoid_fit, y=perf_th_err, col=as.factor(id_predDistr), group=as.factor(id_predDistr))) +
stat_summary(fun.data = "mean_cl_boot") +
stat_summary(fun.y = "mean", geom = "line") +
facet_grid(sigmoid_gen ~ .)  +
scale_x_discrete(limits=c( "weibull", "gauss", "gumbel","cauchy", "logistic")) +
theme(legend.position="none") +
ylab(label="") +
xlab(label="")
plot_chunk4 <- ggplot(data=(data %>% filter(sigmoid_gen=="logistic")), aes(x=sigmoid_fit, y=perf_th_err, col=as.factor(id_predDistr), group=as.factor(id_predDistr))) +
stat_summary(fun.data = "mean_cl_boot") +
stat_summary(fun.y = "mean", geom = "line") +
facet_grid(sigmoid_gen ~ .)  +
scale_x_discrete(limits=c( "logistic", "weibull", "gauss","gumbel","cauchy")) +
theme(legend.position="none") +
ylab(label="") +
xlab(label="")
plot_chunk5 <- ggplot(data=(data %>% filter(sigmoid_gen=="cauchy")), aes(x=sigmoid_fit, y=perf_th_err, col=as.factor(id_predDistr), group=as.factor(id_predDistr))) +
stat_summary(fun.data = "mean_cl_boot") +
stat_summary(fun.y = "mean", geom = "line") +
facet_grid(sigmoid_gen ~ .)  +
scale_x_discrete(limits=c("cauchy", "logistic", "weibull", "gauss", "gumbel")) +
theme(legend.position="none") +
ylab(label="") +
xlab(label="Psychometric function")
grid.arrange(plot_chunk1, plot_chunk2, plot_chunk3, plot_chunk4, plot_chunk5, nrow=5)
anova_iqr <- data %>% filter(0.04 > noise_sd) %>% group_by(sigmoid_gen) %>% do(aov(iqr_fit ~ sigmoid_fit*noise_sd, .) %>% car::Anova() )
anova_iqr
anova_iqr
2.37e-1
8.04e- 2
8.04e-2
anova_iqr <- data %>% filter(0.04 > noise_sd) %>% group_by(sigmoid_gen) %>% do(aov(iqr_fit ~ sigmoid_fit*noise_sd, .) %>% car::Anova() )
anova_iqr
xtable(anova_iqr, type="latex")
anova_iqr <- data %>% filter(0.04 > noise_sd) %>% group_by(sigmoid_gen) %>% do(aov(iqr_fit ~ sigmoid_fit*id_predDistr, .) %>% car::Anova() )
anova_iqr
xtable(anova_iqr, type="latex")
anova_iqr <- data %>% filter(0.04 > noise_sd) %>% group_by(sigmoid_gen) %>% do(aov(iqr_fit ~ sigmoid_fit*id_predDistr, .) %>% car::Anova() )
anova_iqr
parameter <- c("iqr_diff")
group <- c("id_predDistr")
data_grouped <- split(data, f=as.list(data[group]), drop = TRUE)
cds <- matrix(data=list(),nrow = length(data_grouped), ncol = length(data_grouped))
colnames(cds) <- names(data_grouped)
rownames(cds) <- names(data_grouped)
sigs <- matrix(data=list(),nrow = length(data_grouped), ncol = length(data_grouped))
colnames(sigs) <- names(data_grouped)
rownames(sigs) <- names(data_grouped)
#cd values
for(i in 1:length(data_grouped)){
for(j in 1:length(data_grouped)){
cohen_d <- cohensD(x=data_grouped[[i]][[parameter]], y=data_grouped[[j]][[parameter]])
sig  <- sign(mean(data_grouped[[i]][[parameter]])-mean(data_grouped[[j]][[parameter]]))
sigs[i,j] <- sig
cds[i,j] <- cohen_d * sig
}
}
cds
group <- c("sigmoid_fit")
#cd values
for(i in 1:length(data_grouped)){
for(j in 1:length(data_grouped)){
cohen_d <- cohensD(x=data_grouped[[i]][[parameter]], y=data_grouped[[j]][[parameter]])
sig  <- sign(mean(data_grouped[[i]][[parameter]])-mean(data_grouped[[j]][[parameter]]))
sigs[i,j] <- sig
cds[i,j] <- cohen_d * sig
}
}
cds
data_grouped <- split(data, f=as.list(data[group]), drop = TRUE)
cds <- matrix(data=list(),nrow = length(data_grouped), ncol = length(data_grouped))
colnames(cds) <- names(data_grouped)
rownames(cds) <- names(data_grouped)
sigs <- matrix(data=list(),nrow = length(data_grouped), ncol = length(data_grouped))
colnames(sigs) <- names(data_grouped)
rownames(sigs) <- names(data_grouped)
#cd values
for(i in 1:length(data_grouped)){
for(j in 1:length(data_grouped)){
cohen_d <- cohensD(x=data_grouped[[i]][[parameter]], y=data_grouped[[j]][[parameter]])
sig  <- sign(mean(data_grouped[[i]][[parameter]])-mean(data_grouped[[j]][[parameter]]))
sigs[i,j] <- sig
cds[i,j] <- cohen_d * sig
}
}
cds
data1 <- data %>% filter(noise_sd < 0.04)
pairwise.t.test(data1$iqr_diff, data1$sigmoid_fit)
data_grouped <- split(data1, f=as.list(data1[group]), drop = TRUE)
cds <- matrix(data=list(),nrow = length(data_grouped), ncol = length(data_grouped))
colnames(cds) <- names(data_grouped)
rownames(cds) <- names(data_grouped)
sigs <- matrix(data=list(),nrow = length(data_grouped), ncol = length(data_grouped))
colnames(sigs) <- names(data_grouped)
rownames(sigs) <- names(data_grouped)
#cd values
for(i in 1:length(data_grouped)){
for(j in 1:length(data_grouped)){
cohen_d <- cohensD(x=data_grouped[[i]][[parameter]], y=data_grouped[[j]][[parameter]])
sig  <- sign(mean(data_grouped[[i]][[parameter]])-mean(data_grouped[[j]][[parameter]]))
sigs[i,j] <- sig
cds[i,j] <- cohen_d * sig
}
}
ff <- function(x){ifelse(x > 0, x, 0)}
cds
pairwise.t.test(data1$iqr_diff, data1$sigmoid_fit)
#multifactor ANOVA iqr
anova_iqr <- data %>% group_by(sigmoid_gen) %>% do(aov(iqr_fit ~ sigmoid_fit*noise_sd, .) %>% car::Anova() )
rm(list=ls())
###
### dataLoading
### fit_noise.data.csv
file <- file.choose()
###
### dataLoading
### fit_sc_noise.data.csv
file <- file.choose()
dataFile <- read.csv(file)
dataFile$X <- NULL
#fitering individual experiments
data <- dataFile %>% select(sigmoid_gen, core_gen, sigmoid_fit, core_fit,
gamma_gen, lambda_gen, params.1_gen, params.2_gen,
gamma_fit, lambda_fit, params.1_fit, params.2_fit,
noiseType, noise_sd, noise_mean, observations,
perf_th, perf_th_fit,
iqr, iqr_fit, width, width_fit,
log_lik_orig,
log_likelihood_gen_noised, log_likelihood_fit,
log_likelihood_ratio_gen_noised, log_likelihood_ratio_fit,
pearson_x_gen_noised, pearson_x_fit, mse_gen_noised, mse_fit,
id_gen, id_pred, id_sim, id_predDistr, id_fit, algorithm) %>% unique()
write.csv("res_sc_noise.data.csv")
library(dplyr)
library(ggplot2)
library(gridExtra)
###
### dataLoading
### fit_sc_noise.data.csv
file <- file.choose()
dataFile <- read.csv(file)
dataFile$X <- NULL
#fitering individual experiments
data <- dataFile %>% select(sigmoid_gen, core_gen, sigmoid_fit, core_fit,
gamma_gen, lambda_gen, params.1_gen, params.2_gen,
gamma_fit, lambda_fit, params.1_fit, params.2_fit,
noiseType, noise_sd, noise_mean, observations,
perf_th, perf_th_fit,
iqr, iqr_fit, width, width_fit,
log_lik_orig,
log_likelihood_gen_noised, log_likelihood_fit,
log_likelihood_ratio_gen_noised, log_likelihood_ratio_fit,
pearson_x_gen_noised, pearson_x_fit, mse_gen_noised, mse_fit,
id_gen, id_pred, id_sim, id_predDistr, id_fit, algorithm) %>% unique()
write.csv("res_sc_noise.data.csv")
data_anova_noise <- data  %>% aov(mse_fit ~noise_sd, .) %>% summary()
visual_noise <- ggplot(data=data, mapping=aes(x=noise_sd, y=mse_fit)) +
stat_summary(fun.data = "mean_cl_boot") +
stat_summary(fun.y = "mean", geom = "line")  +
ylab(label="MSE")+
xlab(label="noise deviation") +
theme_classic()
visual_noise
write.csv(data,"res_sc_noise.data.csv")
library(dplyr)
library(ggplot2)
###
### dataLoading
### load file:
### fit_sc_obs.data.csv
file <- file.choose()
dataFile <- read.csv(file)
dataFile$X <- NULL
#fitering individual experiments
data <- dataFile %>% select(sigmoid_gen, core_gen, sigmoid_fit, core_fit,
gamma_gen, lambda_gen, params.1_gen, params.2_gen,
gamma_fit, lambda_fit, params.1_fit, params.2_fit,
noiseType, noise_sd, noise_mean, observations,
perf_th, perf_th_fit,
iqr, iqr_fit, width, width_fit,
log_lik_orig,
log_likelihood_gen_noised, log_likelihood_fit,
log_likelihood_ratio_gen_noised, log_likelihood_ratio_fit,
pearson_x_gen_noised, pearson_x_fit, mse_gen_noised, mse_fit,
id_gen, id_pred, id_sim, id_predDistr, id_fit, algorithm) %>% unique()
write.csv(data,"res_sc_obs.data.csv")
anova_obs <- data %>% aov(mse_fit ~observations, .) %>% summary()
#graph
visual_obs <- ggplot(data=data, mapping=aes(x=observations, y=mse_fit)) +
stat_summary(fun.data = "mean_cl_boot") +
stat_summary(fun.y = "mean", geom = "line") +
scale_x_continuous(trans = "log10") +
ylab(label="MSE") +
theme_classic()
visual_obs
parameter <- c("iqr_diff")
group <- c("sigmoid_fit")
### dataLoading
### agregatedData.csv
file <- file.choose()
data <- read.csv(file)
data$X <- NULL
data_grouped <- split(data, f=as.list(data[group]), drop = TRUE)
data_grouped <- split(data_for_iqr, f=as.list(data_for_iqr[group]), drop = TRUE)
cds <- matrix(data=list(),nrow = length(data_grouped), ncol = length(data_grouped))
colnames(cds) <- names(data_grouped)
rownames(cds) <- names(data_grouped)
sigs <- matrix(data=list(),nrow = length(data_grouped), ncol = length(data_grouped))
colnames(sigs) <- names(data_grouped)
rownames(sigs) <- names(data_grouped)
#cd values
for(i in 2:length(data_grouped)){
for(j in 2:length(data_grouped)){
cohen_d <- cohensD(x=data_grouped[[i]][[parameter]], y=data_grouped[[j]][[parameter]])
sig  <- sign(mean(data_grouped[[i]][[parameter]])-mean(data_grouped[[j]][[parameter]]))
sigs[i,j] <- sig
cds[i,j] <- cohen_d * sig
}
}
library(igraph)
library(lsr)
#cd values
for(i in 2:length(data_grouped)){
for(j in 2:length(data_grouped)){
cohen_d <- cohensD(x=data_grouped[[i]][[parameter]], y=data_grouped[[j]][[parameter]])
sig  <- sign(mean(data_grouped[[i]][[parameter]])-mean(data_grouped[[j]][[parameter]]))
sigs[i,j] <- sig
cds[i,j] <- cohen_d * sig
}
}
cds
cds
ff <- function(x){ifelse(x > 0, x, 0)}
lines <-structure(sapply(sigs, ff), dim=dim(cds))
colnames(lines) <- names(data_grouped)
rownames(lines) <- names(data_grouped)
network <- graph_from_adjacency_matrix(lines, mode = "directed")
layout(matrix(1, 1,1))
plot(network,
vertex.color=rgb(0,0,0,0),
vertex.frame.color=rgb(0,0,0,0),
#vertex.shape="circle",
vertex.size=30,
edge.label=t(cds)[t(lines>0)]
)
#cd values
for(i in 1:length(data_grouped)){
for(j in 1:length(data_grouped)){
cohen_d <- cohensD(x=data_grouped[[i]][[parameter]], y=data_grouped[[j]][[parameter]])
sig  <- sign(mean(data_grouped[[i]][[parameter]])-mean(data_grouped[[j]][[parameter]]))
sigs[i,j] <- sig
cds[i,j] <- cohen_d * sig
}
}
ff <- function(x){ifelse(x > 0, x, 0)}
lines <-structure(sapply(sigs, ff), dim=dim(cds))
colnames(lines) <- names(data_grouped)
rownames(lines) <- names(data_grouped)
network <- graph_from_adjacency_matrix(lines, mode = "directed")
layout(matrix(1, 1,1))
plot(network,
vertex.color=rgb(0,0,0,0),
vertex.frame.color=rgb(0,0,0,0),
#vertex.shape="circle",
vertex.size=30,
edge.label=t(cds)[t(lines>0)]
)
parameter <- c("iqr_diff")
parameter <- c("perf_th_fit")
group <- c("sigmoid_fit")
data_grouped <- split(data, f=as.list(data[group]), drop = TRUE)
data_grouped <- split(data_for_iqr, f=as.list(data_for_iqr[group]), drop = TRUE)
cds <- matrix(data=list(),nrow = length(data_grouped), ncol = length(data_grouped))
colnames(cds) <- names(data_grouped)
rownames(cds) <- names(data_grouped)
sigs <- matrix(data=list(),nrow = length(data_grouped), ncol = length(data_grouped))
colnames(sigs) <- names(data_grouped)
rownames(sigs) <- names(data_grouped)
#cd values
for(i in 1:length(data_grouped)){
for(j in 1:length(data_grouped)){
cohen_d <- cohensD(x=data_grouped[[i]][[parameter]], y=data_grouped[[j]][[parameter]])
sig  <- sign(mean(data_grouped[[i]][[parameter]])-mean(data_grouped[[j]][[parameter]]))
sigs[i,j] <- sig
cds[i,j] <- cohen_d * sig
}
}
ff <- function(x){ifelse(x > 0, x, 0)}
lines <-structure(sapply(sigs, ff), dim=dim(cds))
colnames(lines) <- names(data_grouped)
rownames(lines) <- names(data_grouped)
network <- graph_from_adjacency_matrix(lines, mode = "directed")
layout(matrix(1, 1,1))
plot(network,
vertex.color=rgb(0,0,0,0),
vertex.frame.color=rgb(0,0,0,0),
#vertex.shape="circle",
vertex.size=30,
edge.label=t(cds)[t(lines>0)]
)
#parameter among which values Cohen's D is measured - MSE, Pearson X^2, Likelihood, perf_th_err, iqr_diff
parameter <- c("perf_th_err")
group <- c("sigmoid_fit")
### dataLoading
### agregatedData.csv
file <- file.choose()
data_grouped <- split(data, f=as.list(data[group]), drop = TRUE)
data_grouped <- split(data_for_iqr, f=as.list(data_for_iqr[group]), drop = TRUE)
cds <- matrix(data=list(),nrow = length(data_grouped), ncol = length(data_grouped))
colnames(cds) <- names(data_grouped)
rownames(cds) <- names(data_grouped)
sigs <- matrix(data=list(),nrow = length(data_grouped), ncol = length(data_grouped))
colnames(sigs) <- names(data_grouped)
rownames(sigs) <- names(data_grouped)
#cd values
for(i in 1:length(data_grouped)){
for(j in 1:length(data_grouped)){
cohen_d <- cohensD(x=data_grouped[[i]][[parameter]], y=data_grouped[[j]][[parameter]])
sig  <- sign(mean(data_grouped[[i]][[parameter]])-mean(data_grouped[[j]][[parameter]]))
sigs[i,j] <- sig
cds[i,j] <- cohen_d * sig
}
}
cds
cds
### resulting table
res <- cds
upper.tri(res) <- NaN
upper.tri(res) <- Nan
upper.tri(res) <- NaN
upper.tri(res)
res[upper.tri(res)] <- NaN
res
res[1,] <- NULL
res
res[diag(res)]      <- NaN
res[diag(res)]      <- NaN
diag(res)
diag(res)           <- NaN
res
res[1,] <- NULL
cols(res)
col(res)
ncol(res)
res <- res[-1,-ncol(res)]
res
### resulting table
res <- cds
res[upper.tri(res)] <- NaN
diag(res)           <- NaN
res <- res[-1,-ncol(res)]
res
pairwise.t.test(data$perf_th_err, data$sigmoid_fit)
pairwise.t.test(data[parameter], data[group])
parameter
data[parameter]
data[[parameter]]
pairwise.t.test(data[[parameter]], data[[group]])
ff <- function(x){ifelse(x > 0, x, 0)}
lines <-structure(sapply(sigs, ff), dim=dim(cds))
colnames(lines) <- names(data_grouped)
rownames(lines) <- names(data_grouped)
network <- graph_from_adjacency_matrix(lines, mode = "directed")
layout(matrix(1, 1,1))
plot(network,
vertex.color=rgb(0,0,0,0),
vertex.frame.color=rgb(0,0,0,0),
#vertex.shape="circle",
vertex.size=30,
edge.label=t(cds)[t(lines>0)]
)
pfm1 <- PFm(PF("gauss", "al", 0.4,0.1,c(1,1)), predictor = c(0,1,1.5,2,3,4), observations = rep(30,6), type = "PC")
pfm2 <- PFm(PF("gauss", "al", 0.4,0.1,c(1,1/2)), predictor = c(0,1,1.5,2,3,4), observations = rep(30,6), type = "PC")
pfm3 <- PFm(PF("gauss", "al", 0.4,0.1,c(1,2)), predictor = c(0,1,1.5,2,3,4), observations = rep(30,6), type = "PC")
visualRange <- seq(-1,5,length.out = 100)
visualPC1 <- predict(pfm1,visualRange)
visualPC2 <- predict(pfm2,visualRange)
visualPC3 <- predict(pfm3,visualRange)
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC1),size=2, col="grey")
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC2),size=2, col="grey")
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC3),size=2, col="grey")
plot <- plot + xlab("abscissa")
library(ggplot2)
library(PsyFuns)
pfm1 <- PFm(PF("gauss", "al", 0.4,0.1,c(1,1)), predictor = c(0,1,1.5,2,3,4), observations = rep(30,6), type = "PC")
pfm2 <- PFm(PF("gauss", "al", 0.4,0.1,c(1,1/2)), predictor = c(0,1,1.5,2,3,4), observations = rep(30,6), type = "PC")
pfm3 <- PFm(PF("gauss", "al", 0.4,0.1,c(1,2)), predictor = c(0,1,1.5,2,3,4), observations = rep(30,6), type = "PC")
visualRange <- seq(-1,5,length.out = 100)
visualPC1 <- predict(pfm1,visualRange)
visualPC2 <- predict(pfm2,visualRange)
visualPC3 <- predict(pfm3,visualRange)
plot <- ggplot()
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC1),size=2, col="grey")
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC2),size=2, col="grey")
plot <- plot + geom_line(mapping =aes(x=visualRange,y=visualPC3),size=2, col="grey")
plot <- plot + xlab("abscissa")
plot <- plot + ylab("ordinate")
plot <- plot + scale_y_continuous(breaks = c(0,0.5,0.90,1), limits = c(0,1))
plot <- plot + scale_x_continuous(breaks = seq(0,4,1), labels = c(5,10,20,25,30))
plot <- plot + theme_classic(16)
plot <- plot + theme(aspect.ratio = 1)
plot
rm(list=ls())
